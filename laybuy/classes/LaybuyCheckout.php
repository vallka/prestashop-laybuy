<?php

if (!defined('_PS_VERSION_')) {
    exit;
}

/**
 * Class LaybuyCheckout
 *
 * Laybuy PrestaShop Module API Order Payment Generation Class
 */
class LaybuyCheckout
{
    private $cart;
    private $payload;
    private $redirectConfirmUrl;
    private $redirectCancelUrl;
    private $api;

    /**
    * Constructor Function
    *
    * @param string $merchant_id
    * @param string $merchant_secret
    * @param string $mode
    * @param Cart $cart
    * @param string $currency_code
    * since 1.0.0
    */
    public function __construct($cart, $api) {
        $this->cart = $cart;
        $this->api = $api;
    }

    /**
     * Set Redirect Confirm URL
     *
     * Note: Merchant URLs must be generated by a controller class.
     *
     * @param string $redirectConfirmUrl
     * @return LaybuyCheckout
     * @since 1.0.1
     */
    public function setRedirectConfirmUrl($redirectConfirmUrl) {
        $this->redirectConfirmUrl = $redirectConfirmUrl;

        return $this;
    }

    /**
     * Set Redirect Cancel URL
     *
     * Note: Merchant URLs must be generated by a controller class.
     *
     * @param string $redirectCancelUrl
     * @return LaybuyCheckout
     *@since 1.0.1
     */
    public function setRedirectCancelUrl($redirectCancelUrl) {
        $this->redirectCancelUrl = $redirectCancelUrl;

        return $this;
    }

    /**
     * Get Redirect Confirm URL
     *
     * @since 1.0.1
     * @return string
     */
    public function getRedirectConfirmUrl() {
        return $this->redirectConfirmUrl;
    }

    /**
     * Get Redirect Cancel URL
     *
     * @since 1.0.1
     * @return string
     */
    public function getRedirectCancelUrl() {
        return $this->redirectCancelUrl;
    }

    /**
    * Create Order Token function
    *
    * since 1.0.0
    */
    public function createOrderToken() {

        $this->_constructPayload();

        $result = $this->api->createOrder($this->payload);

        if (!$result) {
            throw new LaybuyConfigurationException("Something went wrong in connection");
        } else if ($result->result == 'ERROR') {
            throw new LaybuyConfigurationException($result->error, 101);
        } else {
            header('Location: ' . $result->paymentUrl);
        }
        exit;
    }

    /**
    * Construct API Order Token Payload function
    *
    * since 1.0.0
    */
    private function _constructPayload() {
        $this->payload = [
            'amount'    => $this->cart->getOrderTotal(),
            'returnUrl' => $this->getRedirectConfirmUrl(),
            'merchantReference' => LaybuyHelper::makeUniqueReference($this->cart->id),
            'customer' => $this->_processCustomer(),
            'billingAddress' => $this->_processBillingAddress(),
            'items' => $this->_processItems(),
            'tax' => floatval($this->cart->getOrderTotal() - $this->cart->getOrderTotal(false))
        ];
    }


    /**
    * Extracting API Order Token Payload function for logging purposes
    *
    * since 1.0.0
    */
    public function getPayload() {
        return $this->payload;
    }

    /**
    * Process the Order Items
    *
    * @return array
    * since 1.0.0
    */
    private function _processItems() {

        $tax = floatval($this->cart->getOrderTotal() - $this->cart->getOrderTotal(false));

        // items total
        $shipping_total = $this->cart->getOrderTotal(false, Cart::ONLY_SHIPPING);

        //vallka:
        $items_price = $this->cart->getOrderTotal(false, Cart::BOTH_WITHOUT_SHIPPING);
        $amount = $this->cart->getOrderTotal();

        if (Laybuy::$debug) {
            PrestaShopLogger::addLog("laybuy-vallka:$amount,$items_price,$tax,$shipping_total", 3, NULL, "Laybuy", 1);
        }

        if ($items_price+$tax == $amount) {
            $shipping_total = 0;
            PrestaShopLogger::addLog("laybuy-vallka-corrected!:$amount,$items_price,$tax,$shipping_total", 3, NULL, "Laybuy", 1);
        }
        //vallka end


        // shipping
        if ($shipping_total > 0) {
            $items[] = array(
                'id' => 'shipping_fee#' . $this->cart->id,
                'description' => 'Shipping fee',
                'quantity' => '1',
                'price' =>  $shipping_total
            );
        }

        // tax
        if ($tax) {
            $items[] = array(
                'id' => 'total_tax_amount_for_order#' . $this->cart->id,
                'description' => 'Tax amount for this order',
                'quantity' => '1',
                'price' => $tax
            );
        }

        $items[] = [
            'id'          => 'item_for_order___#' . $this->cart->id,
            'description' => 'Items',
            'quantity'    => 1,
            'price'       => $this->cart->getOrderTotal(false, Cart::BOTH_WITHOUT_SHIPPING)
        ];

        return $items;
    }

    /**
    * Process the Order Billing Address
    *
    * @return array
    * since 1.0.0
    */
    private function _processBillingAddress() {

        $billing_address = new Address($this->cart->id_address_invoice);
        $country_object = new Country( $billing_address->id_country );
        return [
            "address1" => $billing_address->address1,
            "city" => $billing_address->city,
            "postcode" => $billing_address->postcode,
            "country" => $country_object->iso_code,
        ];
    }

    /**
    * Process the Order Customer Details
    *
    * @return array
    * since 1.0.0
    */
    private function _processCustomer() {
        //get Customer Data
        $customer_id = $this->cart->id_customer;
        $customer = new Customer( (int) $customer_id );

        //get the Billing Phone
        $billing_address = new Address($this->cart->id_address_invoice);

        return [
            'firstName' => $customer->firstname,
            'lastName' => $customer->lastname,
            'email' => $customer->email,
            'phone' => $billing_address->phone
        ];
    }
}
